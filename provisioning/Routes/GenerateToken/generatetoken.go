package generatetoken

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"

	"../../Utilities"
	jwt "github.com/dgrijalva/jwt-go"
)

func GenerateToken(w http.ResponseWriter, r *http.Request) {
	url := "https://dev-z1-kqnnv.auth0.com/oauth/token"

	//TODO: Read credentials from Environment or any configuration files
	s1 := GetCred()
	payload := strings.NewReader(s1)
	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error Generating token from AUth0")
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	s := new(Utility.ApiResponse)
	err = json.Unmarshal(body, &s)
	if err != nil {
		fmt.Println("Whoops", err)
	}
	target := "/storeid/" + s.AccessToken
	http.Redirect(w, r, target, http.StatusSeeOther)

	//Improve Write to file Process
}

var mySigningKey = []byte("captainjacksparrowsayshi")

func GenerateJWT() (string, error) {
	token := jwt.New(jwt.SigningMethodHS256)

	claims := token.Claims.(jwt.MapClaims)

	claims["authorized"] = true
	claims["client"] = "Girish Dudhwal"
	claims["exp"] = time.Now().Add(time.Minute * 30).Unix()

	tokenString, err := token.SignedString(mySigningKey)

	if err != nil {
		fmt.Errorf("Something Went Wrong: %s", err.Error())
		return "", err
	}

	return tokenString, nil
}

func GetCred() string {
	type AutoGenerated struct {
		GrantType    string `json:"grant_type"`
		ClientID     string `json:"client_id"`
		ClientSecret string `json:"client_secret"`
		Audience     string `json:"audience"`
	}

	var conf = AutoGenerated{
		"client_credentials",
		"1lBr0bF30njM3qHTzHGsaYc5Z4RZaEL8",
		"5dUpVPFu6sof7u4aDjHHR59dzRadR1k1zh6q7x3dJuCQTIzhX9TDWGIlbpY76-tb",
		"zedlocal",
	}

	fmt.Printf("%#v", conf)
	s, err := json.Marshal(conf)
	if err != nil {
		fmt.Println("Error in testjson", err)
	}
	fmt.Println("string returning is", string(s))
	return string([]byte(s))

}
